<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Developers Blog]]></title>
  <link href="http://mofus.github.io/atom.xml" rel="self"/>
  <link href="http://mofus.github.io/"/>
  <updated>2014-01-29T22:39:42+01:00</updated>
  <id>http://mofus.github.io/</id>
  <author>
    <name><![CDATA[Anders Bech Mellson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fish and Ruby]]></title>
    <link href="http://mofus.github.io/blog/2014/01/29/fish-and-ruby/"/>
    <updated>2014-01-29T22:32:18+01:00</updated>
    <id>http://mofus.github.io/blog/2014/01/29/fish-and-ruby</id>
    <content type="html"><![CDATA[<p>When I starting looking for a blogging platform I tried a few.
<a href="https://ghost.org/">Ghost</a> seems really nice, I could revisit it in the future.</p>

<p>However for this blog I chose <a href="http://octopress.org/">Octopress</a>.
Github even allows you to host your own blog for free when you run Octopress which is based on <a href="http://jekyllrb.com/">Jekyll</a>.</p>

<h2>Fish Trouble</h2>

<p>I have fallen in love with the <a href="http://fishshell.com/">Fish Shell</a>, I encourage you to try it.
However I was not aware of the problems with bash scripts in Fish before trying to setup Octopress.</p>

<p>So I struggled when I had to use <a href="http://rvm.io/">RVM</a>, which is a collection of bash scripts.
After wasting a few hours I found this <a href="http://rvm.io/integration/fish">solution</a> on the RVM page.</p>

<p>This will let you keep using Fish even when you need RVM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Faster Android Emulator]]></title>
    <link href="http://mofus.github.io/blog/2014/01/27/a-faster-android-emulator/"/>
    <updated>2014-01-27T19:30:46+01:00</updated>
    <id>http://mofus.github.io/blog/2014/01/27/a-faster-android-emulator</id>
    <content type="html"><![CDATA[<p>Anyone who has done Android development will know that the standard emulator (Android Virtual Device Manager) is very slow to startup.
Luckily there is a much speedier alternative!</p>

<h2>Speeding Things Up</h2>

<p><a href="http://www.genymotion.com/">Genymotion</a> is an alternative emulator which is much faster.
However it is a paid product.
They offer a free personal version which I am using.</p>

<h3>Initial Setup (Mac)</h3>

<ol>
<li><a href="https://www.virtualbox.org/wiki/Downloads">Install Virtual Box</a></li>
<li><a href="https://cloud.genymotion.com/page/customer/login/">Create an account at Genymotion</a></li>
<li><a href="https://cloud.genymotion.com/page/launchpad/download/">Install Genymotion</a></li>
<li>Optional <a href="https://cloud.genymotion.com/page/launchpad/download/">Install an IDE Plugin</a> (I use the IntelliJ plugin)</li>
<li>Startup Genymotion and add the device you want</li>
<li>Press play on that device</li>
<li>Run your Android code (In my IntelliJ run configuration I have set the target device to <code>Show chooser dialog</code>)</li>
</ol>


<p>If you want to use Genymotion on Windows you can skip step 1 as that is included in the installer.</p>

<h3>Everyday usage</h3>

<p>The above is for the initial setup of Genymotion.
After the first setup it gets much easier to use the emulator.
Just follow these three steps.</p>

<ol>
<li>Startup Genymotion</li>
<li>Press play on your virtual device</li>
<li>Run your Android code</li>
</ol>


<h2>Benchmark</h2>

<p>Let us see how much faster Genymotion is compared to the standard emulator.
We will approach this in a very, <em>ahem</em>, scientific benchmark of the two emulators using a timer on my smartphone.
Before you can run your Android emulator you need to prepare it.
Let us test how long it takes to do just that.</p>

<h3>Installing the virtual devices</h3>

<p>Both emulators is installing a virtual Nexus 4 device from scratch.
I open the emulator press start on my timer and ask them to startup the device.
When the virtual device hits the desktop I stop the clock.</p>

<ul>
<li>Cold boot of the normal emulator with a Nexus 4 virtual device &ndash; <strong>211 seconds</strong></li>
<li>Cold boot of Genymotion with a Nexus 4 virtual device &ndash; <strong>14 seconds</strong></li>
</ul>


<p>Over 3 minutes saved here alone.</p>

<h3>Running the virtual devices</h3>

<p>After the initial setup you still need to boot up your virtual device every time you need it.
So lets us test how a normal start of the emulators fare against each other.</p>

<ul>
<li>Boot of the normal emulator with a Nexus 4 virtual device &ndash; <strong>62 seconds</strong></li>
<li>Boot of Genymotion with a Nexus 4 virtual device &ndash; <strong>9 seconds</strong></li>
</ul>


<p>Keep in mind that when you are developing you don&rsquo;t need to shutdown the emulator between runs.</p>

<p><em>The test computer is a MacBook Pro, 2,6 GHz i7, 16GB RAM and SSD running os 10.9.1.</em></p>
]]></content>
  </entry>
  
</feed>
